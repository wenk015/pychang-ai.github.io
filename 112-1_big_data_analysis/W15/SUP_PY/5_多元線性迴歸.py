# -*- coding: utf-8 -*-
"""5 多元線性迴歸.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iXifxI-AoJlkVMravR5rXP_2pDn8yYtS

# 多元線性迴歸  

本章重點：
* 檢視係數的重要性
* 標準化係數
* 用管道器結合資料轉化器和預測器
* 水平合併器
* 實作管道器

多元線性迴歸和簡單線性迴歸的差異就在於自變數可以擁有多個變數。方程式如下所示。線性迴歸的功能就是要預測$\beta_0$...$\beta_n$係數。

$$y = \beta_0 + \beta_1X_1 + \beta_2X_2 + ...$$

## 1 載入資料
資料仍沿續上一章的波士頓房價。因為資料跟上一章相同，所以我們就不再進行資料探索的動作。
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
plt.rcParams['font.sans-serif'] = ['DFKai-sb']
plt.rcParams['axes.unicode_minus'] = False
# %config InlineBackend.figure_format = 'retina'
import warnings
warnings.filterwarnings('ignore')

from sklearn.datasets import load_boston
boston = load_boston()
df = pd.DataFrame(data = boston['data'], columns = boston['feature_names'])
df['target'] = boston['target']
df.head()

X = df.drop('target', axis=1)
y = df['target']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                   test_size=0.33, random_state=42)

X_train.head()

"""## 3 迴歸模型建構三步驟：
* 初始物件
* 機器學習
* 模型預測  

你會發現指令都沒有修改。所以用sklearn來學習是很容易上手的。  
範例： 初始迴歸物件  
"""

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(X_train, y_train)

print('常數項',model.intercept_)
print('廻歸係數',model.coef_)

pd.DataFrame(zip(X.columns, model.coef_), columns=['變數','係數']).\
sort_values(by='係數', ascending=False)

from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
model_pl = make_pipeline(StandardScaler(), LinearRegression())
model_pl.fit(X_train, y_train)

reg = model_pl.named_steps['linearregression']
pd.DataFrame(zip(X.columns, reg.coef_), columns=['變數','係數']).\
sort_values(by='係數', ascending=False)

model_pl.named_steps.keys()

"""## 5 預測結果的好壞評估

範例： 進行訓練集資料的預測  
跟上一章的簡單迴歸相比，所有評估績效都有所提升
"""

y_pred = model_pl.predict(X_test)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
print('Mean Squred Error:',mean_squared_error(y_test, y_pred))
print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
print('R2 Score:', r2_score(y_test, y_pred))

y_train.iloc[0]

model_pl.predict(X_train.iloc[[0]])

from sklearn.compose import ColumnTransformer
data_pl = ColumnTransformer([
    ('column_sel',StandardScaler(),X.columns[:3])
])
model_pl = make_pipeline(data_pl, LinearRegression())
model_pl.fit(X_train, y_train)
y_pred = model_pl.predict(X_test)

print('Mean Squred Error:',mean_squared_error(y_test, y_pred))
print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
print('R2 Score:', r2_score(y_test, y_pred))

data_pl = ColumnTransformer([
    ('column_sel','passthrough',['LSTAT'])
])
model_pl = make_pipeline(data_pl, LinearRegression())
model_pl.fit(X_train, y_train)
y_pred = model_pl.predict(X_test)
print('Mean Squred Error:',mean_squared_error(y_test, y_pred))
print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
print('R2 Score:', r2_score(y_test, y_pred))

fig, axes = plt.subplots(1, 2, figsize=(8,3))
df['LSTAT'].hist(alpha=0.4, bins=30, ax=axes[0])
axes[0].set_title('原始')
# 對'LSTAT'欄位進行log轉換
np.log1p(df['LSTAT']).hist(alpha=0.4, bins=30, ax=axes[1])
axes[1].set_title('進行log轉換');

from sklearn.preprocessing import FunctionTransformer
data_pl = ColumnTransformer([
    ('column_sel','passthrough',['LSTAT'])
])
model_pl = make_pipeline(data_pl,
                         FunctionTransformer(np.log1p),
                         LinearRegression())
model_pl.fit(X_train, y_train)
y_pred = model_pl.predict(X_test)

print('Mean Squred Error:',mean_squared_error(y_test, y_pred))
print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
print('R2 Score:', r2_score(y_test, y_pred))

# 用字典存放初始化的轉換器和預測器
pl = dict()
pl['ss'] = StandardScaler()
pl['regression'] = LinearRegression()

# 訓練集會做標準化的學習和轉換，再進行預測器的學習。
pl['regression'].fit(pl['ss'].fit_transform(X_train), y_train)
# 測試集會做標準化的轉換，和預測器的預測。
y_pred = pl['regression'].predict(pl['ss'].transform(X_test))
print('Mean Squred Error:',mean_squared_error(y_test, y_pred))
print('Mean Absolute Error:', mean_absolute_error(y_test, y_pred))
print('R2 Score:', r2_score(y_test, y_pred))

"""## 作業

1. 請選取['PTRATIO', 'B', 'LSTAT']欄位來進行多元線性迴歸，並輸出殘差值和R平方。

2. 請選取['RM']欄位來進行多元線性迴歸，而且要做log轉換，再輸出殘差值和R平方。再對照前一章的結果。
"""